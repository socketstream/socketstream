{
  "name": "connect-timeout",
  "description": "timeout middleware",
  "version": "1.4.0",
  "contributors": [
    {
      "name": "Douglas Christopher Wilson",
      "email": "doug@somethingdoug.com"
    },
    {
      "name": "Jonathan Ong",
      "email": "me@jongleberry.com",
      "url": "http://jongleberry.com"
    }
  ],
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/expressjs/timeout"
  },
  "dependencies": {
    "debug": "~2.1.0",
    "http-errors": "~1.2.7",
    "ms": "0.6.2",
    "on-headers": "~1.0.0"
  },
  "devDependencies": {
    "istanbul": "0.3.2",
    "mocha": "~1.21.4",
    "should": "~4.0.4",
    "supertest": "~0.14.0"
  },
  "files": [
    "LICENSE",
    "HISTORY.md",
    "index.js"
  ],
  "engines": {
    "node": ">= 0.8"
  },
  "scripts": {
    "test": "mocha --reporter spec --bail --check-leaks test/",
    "test-cov": "istanbul cover node_modules/mocha/bin/_mocha -- --reporter dot --check-leaks test/",
    "test-travis": "istanbul cover node_modules/mocha/bin/_mocha --report lcovonly -- --reporter dot --check-leaks test/"
  },
  "readme": "# connect-timeout\n\n[![NPM Version][npm-image]][npm-url]\n[![NPM Downloads][downloads-image]][downloads-url]\n[![Build Status][travis-image]][travis-url]\n[![Test Coverage][coveralls-image]][coveralls-url]\n[![Gratipay][gratipay-image]][gratipay-url]\n\nTimes out the request in `ms`, defaulting to `5000`.\n\n## Install\n\n```sh\n$ npm install connect-timeout\n```\n\n## API\n\n**NOTE** This module is not recommend as a \"top-level\" middleware (i.e. `app.use(timeout('5s'))`) unless\nyou take precautions to halt your own middleware processing. See [as top-level middleware](#as-top-level-middleware)\nfor how to use as a top-level middleware.\n\n### timeout(time, options)\n\nReturns middleware that times out in `time` milliseconds. `time` can also be a string accepted by the [ms](https://www.npmjs.org/package/ms#readme) module. On timeout, `req` will emit `\"timeout\"`.\n\n#### options\n\n* `respond` - If `true`, the timeout error is passed to `next()` so that you may customize the response behavior. This error has a `.timeout` property as well as `.status == 503`. This defaults to `true`.\n\n### req.clearTimeout()\n\nClears the timeout on the request.\n\n### req.timedout\n\n`true` if timeout fired; `false` otherwise.\n\n## Examples\n\n### as top-level middleware\n\nBecause of the way middleware processing works, this once this module passes the request\nto the next middleware (which it has to do in order for you to do work), it can no longer\nstop the flow, so you must take care to check if the request has timedout before you\ncontinue to act on the request.\n\n```javascript\nvar express = require('express');\nvar timeout = require('connect-timeout');\n\n// example of using this top-level; note the use of haltOnTimedout\n// after every middleware; it will stop the request flow on a timeout\nvar app = express();\napp.use(timeout('5s'));\napp.use(bodyParser());\napp.use(haltOnTimedout);\napp.use(cookieParser());\napp.use(haltOnTimedout);\n\n// Add your routes here, etc.\n\nfunction haltOnTimedout(req, res, next){\n  if (!req.timedout) next();\n}\n\napp.listen(3000);\n```\n\n### express 3.x\n\n```javascript\nvar express = require('express');\nvar bodyParser = require('body-parser');\nvar timeout = require('connect-timeout');\n\nvar app = express();\napp.post('/save', timeout('5s'), bodyParser.json(), haltOnTimedout, function(req, res, next){\n  savePost(req.body, function(err, id){\n    if (err) return next(err);\n    if (req.timedout) return;\n    res.send('saved as id ' + id);\n  });\n});\n\nfunction haltOnTimedout(req, res, next){\n  if (!req.timedout) next();\n}\n\nfunction savePost(post, cb){\n  setTimeout(function(){\n    cb(null, ((Math.random()* 40000) >>> 0));\n  }, (Math.random()* 7000) >>> 0));\n}\n\napp.listen(3000);\n```\n\n### connect\n\n```javascript\nvar bodyParser = require('body-parser');\nvar connect = require('connect');\nvar timeout = require('connect-timeout');\n\nvar app = require('connect');\napp.use('/save', timeout('5s'), bodyParser.json(), haltOnTimedout, function(req, res, next){\n  savePost(req.body, function(err, id){\n    if (err) return next(err);\n    if (req.timedout) return;\n    res.send('saved as id ' + id);\n  });\n});\n\nfunction haltOnTimedout(req, res, next){\n  if (!req.timedout) next();\n}\n\nfunction savePost(post, cb){\n  setTimeout(function(){\n    cb(null, ((Math.random()* 40000) >>> 0));\n  }, (Math.random()* 7000) >>> 0));\n}\n\napp.listen(3000);\n```\n\n## License\n\n[MIT](LICENSE)\n\n[npm-image]: https://img.shields.io/npm/v/connect-timeout.svg?style=flat\n[npm-url]: https://npmjs.org/package/connect-timeout\n[travis-image]: https://img.shields.io/travis/expressjs/timeout.svg?style=flat\n[travis-url]: https://travis-ci.org/expressjs/timeout\n[coveralls-image]: https://img.shields.io/coveralls/expressjs/timeout.svg?style=flat\n[coveralls-url]: https://coveralls.io/r/expressjs/timeout?branch=master\n[downloads-image]: https://img.shields.io/npm/dm/connect-timeout.svg?style=flat\n[downloads-url]: https://npmjs.org/package/connect-timeout\n[gratipay-image]: https://img.shields.io/gratipay/dougwilson.svg?style=flat\n[gratipay-url]: https://www.gratipay.com/dougwilson/\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/expressjs/timeout/issues"
  },
  "homepage": "https://github.com/expressjs/timeout",
  "_id": "connect-timeout@1.4.0",
  "_from": "connect-timeout@>=1.4.0 <1.5.0"
}
