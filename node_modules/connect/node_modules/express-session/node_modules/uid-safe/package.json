{
  "name": "uid-safe",
  "description": "URL and cookie safe UIDs",
  "version": "1.0.1",
  "author": {
    "name": "Jonathan Ong",
    "email": "me@jongleberry.com",
    "url": "http://jongleberry.com"
  },
  "license": "MIT",
  "repository": {
    "type": "git",
    "url": "https://github.com/crypto-utils/uid-safe"
  },
  "dependencies": {
    "mz": "1",
    "base64-url": "1"
  },
  "devDependencies": {
    "bluebird": "2",
    "mocha": "1"
  },
  "scripts": {
    "test": "mocha --reporter spec --bail"
  },
  "readme": "\n# UID Safe\n\nCreate cryptographically secure UIDs safe for both cookie and URL usage.\nThis is in contrast to modules such as [rand-token](https://github.com/sehrope/node-rand-token)\nand [uid2](https://github.com/coreh/uid2) whose UIDs are actually skewed\ndue to the use of `%` and unnecessarily truncate the UID.\nUse this if you could still use UIDs with `-` and `_` in them.\n\n## API\n\n```js\nvar uid = require('uid-safe')\n```\n\n### uid(byteLength, [cb])\n\nAsynchronously create a UID with a specific byte length.\nBecause `base64` encoding is used underneath, this is not the string length!\nFor example, to create a UID of length 24, you want a byte length of 18!\n\nIf `cb` is not defined, a promise is returned.\nHowever, to use promises, you must either install [bluebird](https://github.com/petkaantonov/bluebird)\nor use a version of node.js that has native promises,\notherwise your process will crash and die.\n\n```js\nuid(18).then(function (string) {\n  // do something with the string\n})\n\nuid(18, function (err, string) {\n  if (err) throw err\n  // do something with the string\n})\n```\n\n### uid.sync(byteLength)\n\nA synchronous version of above.\n\n```js\nvar string = uid.sync(18)\n```\n",
  "readmeFilename": "README.md",
  "bugs": {
    "url": "https://github.com/crypto-utils/uid-safe/issues"
  },
  "homepage": "https://github.com/crypto-utils/uid-safe",
  "_id": "uid-safe@1.0.1",
  "_from": "uid-safe@1.0.1"
}
